/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,18],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[5,21,27,29,32,33,35,52,54,55,56,57,58],$Vd=[2,28],$Ve=[1,40],$Vf=[1,42],$Vg=[1,44],$Vh=[1,46],$Vi=[1,48],$Vj=[1,56],$Vk=[1,53],$Vl=[1,54],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,69],$Vs=[1,67],$Vt=[1,68],$Vu=[1,73],$Vv=[19,26,43,45],$Vw=[8,26,27,29,32,33,35,48],$Vx=[1,101],$Vy=[1,102],$Vz=[1,103],$VA=[1,104],$VB=[8,18,19,20,26,27,29,32,33,35,37,38,39,43,45,48],$VC=[26,27,29,32,33,35,48],$VD=[1,117],$VE=[1,118],$VF=[1,119],$VG=[18,19,20,26],$VH=[1,148],$VI=[1,149],$VJ=[8,19,26,43,45],$VK=[8,18,19,20,26,27,29,32,33,35,37,43,45,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"PTCOMA":8,"imprimir":9,"if":10,"for":11,"while":12,"do_while":13,"void":14,"funciones":15,"concatenars":16,"concatenar":17,"MAS":18,"IDENTIFICADOR":19,"CADENA":20,"T_CONSOLE":21,"T_PUNTO":22,"T_WRITE":23,"PARIZQ":24,"expresion":25,"PARDER":26,"T_INT":27,"T_IGUAL":28,"T_BOOL":29,"T_TRUE":30,"T_FALSE":31,"T_STRING":32,"T_CHAR":33,"CHAR":34,"T_DOUBLE":35,"DECIMAL":36,"MENOS":37,"POR":38,"DIVIDIDO":39,"ENTERO":40,"logicos":41,"logico":42,"T_OR":43,"relacionales":44,"T_AND":45,"parametros":46,"parametro":47,"T_COMA":48,"T_MAYORQ":49,"T_MENORQ":50,"T_DIFERENTE":51,"T_IF":52,"LLAVEA":53,"LLAVEC":54,"T_FOR":55,"T_WHILE":56,"T_DO":57,"T_VOID":58,"type":59,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PTCOMA",18:"MAS",19:"IDENTIFICADOR",20:"CADENA",21:"T_CONSOLE",22:"T_PUNTO",23:"T_WRITE",24:"PARIZQ",26:"PARDER",27:"T_INT",28:"T_IGUAL",29:"T_BOOL",30:"T_TRUE",31:"T_FALSE",32:"T_STRING",33:"T_CHAR",34:"CHAR",35:"T_DOUBLE",36:"DECIMAL",37:"MENOS",38:"POR",39:"DIVIDIDO",40:"ENTERO",43:"T_OR",45:"T_AND",48:"T_COMA",49:"T_MAYORQ",50:"T_MENORQ",51:"T_DIFERENTE",52:"T_IF",53:"LLAVEA",54:"LLAVEC",55:"T_FOR",56:"T_WHILE",57:"T_DO",58:"T_VOID"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[16,2],[16,1],[17,2],[17,2],[17,1],[17,1],[9,6],[9,6],[9,7],[7,4],[7,4],[7,4],[7,4],[7,4],[7,4],[7,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,1],[25,3],[41,2],[41,1],[42,2],[42,2],[42,1],[46,2],[46,1],[47,1],[47,2],[44,3],[44,3],[44,3],[44,3],[44,4],[44,4],[44,4],[44,4],[44,4],[44,4],[44,4],[44,4],[44,4],[44,4],[44,4],[44,4],[44,4],[44,4],[44,4],[44,4],[10,7],[11,13],[11,13],[12,7],[13,9],[14,8],[15,8],[15,8],[15,8],[15,8],[15,8],[59,1],[59,1],[59,1],[59,1],[59,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			
		  for(var i = 0; i< $$[$0-1].length; i++){
            if($$[$0-1][i])
				console.log("hola")
				console.log($$[$0-1][i])
				var instru= new Instruccion($$[$0-1][i]);
				instru.prueba($$[$0-1][i])
		        $$[$0-1][i].operar(tabla_simbolo, reportes)
        }
		//console.log("------Tabla de simbolos------")
		//console.log(tabla_simbolo)
		
		

		return reportes;
	
break;
case 2:
console.log("Estoy en instrucciones--- ");this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3:
identacion.menosIden();console.log("Estoy en instruccion");this.$ = []; this.$.push($$[$0])
break;
case 4:
 console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
			  reportes.putError_sintactico({lexema:yytext, fila: this._$.first_line, columna:this._$.first_column })
			
break;
case 5:
 /*identacion.masIden();*/  console.log("Paso a aqui 1", $$[$0-1]); if($$[$0-1] != null){this.$ = $$[$0-1]}
break;
case 6:
 /*identacion.masIden();*/  console.log("Paso a aqui 2", $$[$0-1]); if($$[$0-1] != null){this.$ = $$[$0-1]}
break;
case 7: case 8: case 9: case 10: case 11: case 12:
  /*identacion.menosIden();*/ console.log("Paso a aqui 3", $$[$0]); if($$[$0] != null){this.$ = $$[$0]}
break;
case 13: case 36: case 41:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 14: case 37: case 42:
this.$ = []; this.$.push($$[$0]);
break;
case 15:
this.$= new Conca(" , "+$$[$0],"param");
break;
case 16:
this.$= new Conca(" , \""+$$[$0]+"\"","param");
break;
case 17:
this.$= new Conca($$[$0],"param");
break;
case 18:
this.$= new Conca("\""+$$[$0]+"\"","param");
break;
case 19:
 console.log("Paso a aqui PRINT", $$[$0-5]); this.$ = new Print($$[$0-1],this._$.first_line,this._$.first_column,"EXPRESION","imprimir","print("+$$[$0-1]+")\n");
break;
case 20:
 console.log("Paso a aqui PRINT", $$[$0-5]); var auxprint= new Print($$[$0-1],this._$.first_line,this._$.first_column,"IDEN","imprimir",$$[$0-1],identacion.getIden()/*+1*/);this.$ = new Print($$[$0-1],this._$.first_line,this._$.first_column,"IDEN","imprimir",identacion.generarIden()+"print("+auxprint.trad2()+")\n",identacion.getIden()/*+1*/);
break;
case 21:
 console.log("Paso a aqui PRINT", $$[$0-6]); var auxprint= new Print($$[$0-2],this._$.first_line,this._$.first_column,"IDEN","imprimir",$$[$0-1],identacion.getIden()/*+1*/);this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,"IDEN","imprimir",identacion.generarIden()+"print(" +$$[$0-2]+auxprint.trad2()+")\n",identacion.getIden()/*+1*/);
break;
case 22:
console.log("Paso a aqui DECLA", $$[$0-3]);  this.$ = new Declaracion($$[$0-2]+"="+$$[$0],$$[$0-3],Type.VARIABLE,Type.VARIABLE, 'RESOLVER EXPRESION' ,this._$.first_line,this._$.first_column,"declaracion",$$[$0-2]+"="+$$[$0]+"\n",identacion.generarIden()+identacion.getIden()/*+1*/);trad+= $$[$0-2]+"="+$$[$0]
break;
case 23: case 24: case 26: case 27:
 console.log("Paso a aqui DECLA", $$[$0-3]);  this.$ = new Declaracion($$[$0-2]+"="+$$[$0],$$[$0-3],Type.VARIABLE,Type.VARIABLE, 'RESOLVER EXPRESION' ,this._$.first_line,this._$.first_column,"declaracion",$$[$0-2]+"="+$$[$0]+"\n");trad+= $$[$0-2]+"="+$$[$0]
break;
case 25:
 console.log("Paso a aqui DECLA", $$[$0-3]);  this.$ = new Declaracion($$[$0-2]+"="+$$[$0],$$[$0-3],Type.VARIABLE,Type.VARIABLE, 'RESOLVER EXPRESION' ,this._$.first_line,this._$.first_column,"declaracion",$$[$0-2]+"=\""+$$[$0]+"\"\n");trad+= $$[$0-2]+"="+$$[$0]
break;
case 28:
console.log("Paso a aqui DECLA", $$[$0-1]);  this.$ = new Declaracion($$[$0],$$[$0-1],Type.VARIABLE,Type.VARIABLE, 'RESOLVER EXPRESION100' ,this._$.first_line,this._$.first_column,"declaracion",$$[$0],identacion.generarIden()+identacion.getIden()/*+1*/);trad+= $$[$0]
break;
case 29:
 this.$ = $$[$0] *-1; 
break;
case 30:
 this.$ = $$[$0-2] + $$[$0]; 
break;
case 31:
 this.$ = $$[$0-2] - $$[$0]; 
break;
case 32:
 this.$ = $$[$0-2] * $$[$0]; 
break;
case 33:
 this.$ = $$[$0-2] / $$[$0]; 
break;
case 34:
 this.$ = Number($$[$0]); 
break;
case 35:
 this.$ = $$[$0-1]; 
break;
case 38:
this.$= new Logi(" or "+$$[$0]["tradu"],"param");
break;
case 39:
this.$= new Logi(" and "+$$[$0]["tradu"],"param");
break;
case 40:
this.$= new Logi($$[$0]["tradu"],"param");
break;
case 43:
 this.$ = new Param($$[$0]["tradu"],"param");
break;
case 44:
 this.$ = new Param(","+$$[$0]["tradu"],"param"); 
break;
case 45: case 46:
this.$= new Logi($$[$0-2] +">"+$$[$0],"param");
break;
case 47: case 48:
this.$= new Logi($$[$0-2] +"<"+$$[$0],"param");
break;
case 49: case 50:
this.$= new Logi($$[$0-3] +">="+$$[$0],"param");
break;
case 51: case 52:
this.$= new Logi($$[$0-3] +"<="+$$[$0],"param");
break;
case 65:
identacion.masIden();console.log("Paso por If");var auxif= new If($$[$0-4],"Condicion If", $$[$0-1],identacion.getIden()); this.$= new If($$[$0-4],"Condicion If", "if "+auxif.trad2()+" :\n"+auxif.trad()+"\n",identacion.getIden());
break;
case 66: case 67:
identacion.masIden();console.log("Paso por for");var auxfor= new For($$[$0-10],$$[$0-8], $$[$0-6]+$$[$0-5]+$$[$0-4],"Ciclo For",$$[$0-1],identacion.getIden()); this.$= new For(auxfor.obtenerDatoDecla2(),auxfor.obtenerCondicion(), $$[$0-6]+$$[$0-5]+$$[$0-4],"Ciclo For","for "+auxfor.obtenerDatoDecla2()+" in range("+auxfor.obtenerDatoDecla()+","+auxfor.obtenerCondicion()+"):\n"+auxfor.trad(),identacion.getIden());
break;
case 68:
identacion.masIden();console.log("Paso por While");var auxwhile= new While($$[$0-4],"Ciclo While", $$[$0-1],identacion.getIden()); this.$= new While($$[$0-4],"Ciclo While", "while "+auxwhile.trad2()+" :\n"+auxwhile.trad()+"\n",identacion.getIden());
break;
case 69:
identacion.masIden();console.log("Paso por Do While");var auxdowhile= new DoWhile($$[$0-2],"Ciclo Do While", $$[$0-6],identacion.getIden()); this.$= new DoWhile($$[$0-6],"Ciclo Do While", "while True :\n"+auxdowhile.trad()+"\n"+auxdowhile.generarIden(identacion.getIden())+"if "+auxdowhile.trad2()+":\n"+auxdowhile.generarIden(identacion.getIden()+1)+"break\n",identacion.getIden());
break;
case 70:
identacion.masIden();console.log("Paso por Void");var auxvoid= new Void($$[$0-6],$$[$0-4], "Void",$$[$0-1],identacion.getIden()); this.$= new Void($$[$0-6],$$[$0-4],"Void", "def "+$$[$0-6]+"("+auxvoid.trad2()+" ):\n"+auxvoid.trad()+"\n",identacion.getIden());
break;
case 71:
identacion.masIden();console.log("Paso por Func");var auxfunc= new Func("Int",$$[$0-6],$$[$0-4], "Funcion",$$[$0-1],identacion.getIden()); this.$= new Func("Int",$$[$0-6],$$[$0-4],"Void", "def "+$$[$0-6]+"("+auxfunc.trad2()+" ):\n"+auxfunc.trad()+"\n",identacion.getIden());
break;
case 72:
identacion.masIden();console.log("Paso por Void");var auxfunc= new Func("String",$$[$0-6],$$[$0-4], "Funcion",$$[$0-1],identacion.getIden()); this.$= new Func("String",$$[$0-6],$$[$0-4],"Void", "def "+$$[$0-6]+"("+auxfunc.trad2()+" ):\n"+auxfunc.trad()+"\n",identacion.getIden());
break;
case 73:
identacion.masIden();console.log("Paso por Void");var auxfunc= new Func("Char",$$[$0-6],$$[$0-4], "Funcion",$$[$0-1],identacion.getIden()); this.$= new Func("Char",$$[$0-6],$$[$0-4],"Void", "def "+$$[$0-6]+"("+auxfunc.trad2()+" ):\n"+auxfunc.trad()+"\n",identacion.getIden());
break;
case 74:
identacion.masIden();console.log("Paso por Void");var auxfunc= new Func("Bool",$$[$0-6],$$[$0-4], "Funcion",$$[$0-1],identacion.getIden()); this.$= new Func("Bool",$$[$0-6],$$[$0-4],"Void", "def "+$$[$0-6]+"("+auxfunc.trad2()+" ):\n"+auxfunc.trad()+"\n",identacion.getIden());
break;
case 75:
identacion.masIden();console.log("Paso por Void");var auxfunc= new Func("Double",$$[$0-6],$$[$0-4], "Funcion",$$[$0-1],identacion.getIden()); this.$= new Func("Double",$$[$0-6],$$[$0-4],"Void", "def "+$$[$0-6]+"("+auxfunc.trad2()+" ):\n"+auxfunc.trad()+"\n",identacion.getIden());
break;
case 76:
this.$ = Type.ENTERO
break;
case 77:
this.$ = Type.DOUBLE
break;
case 78:
this.$ = Type.BOOLEANO
break;
case 79:
this.$ = Type.STRING
break;
case 80:
this.$ = Type.CHAR
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},{1:[3]},{5:[1,24],6:25,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},o($Vc,[2,3]),{6:26,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},{8:[1,27]},{8:[1,28]},o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),{19:[1,29]},{19:[1,30]},{19:[1,31]},{19:[1,32]},{19:[1,33]},{22:[1,34]},{24:[1,35]},{24:[1,36]},{24:[1,37]},{53:[1,38]},{19:[1,39]},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),{8:$Vd,24:[1,41],28:$Ve},{24:[1,43],28:$Vf},{24:[1,45],28:$Vg},{24:[1,47],28:$Vh},{24:[1,49],28:$Vi},{23:[1,50]},{19:$Vj,41:51,42:52,43:$Vk,44:55,45:$Vl},{7:57,27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq},{19:$Vj,41:63,42:52,43:$Vk,44:55,45:$Vl},{2:$V0,4:64,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},{24:[1,65]},{24:$Vr,25:66,37:$Vs,40:$Vt},{7:72,27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq,46:70,47:71,48:$Vu},{30:[1,74],31:[1,75]},{7:72,27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq,46:76,47:71,48:$Vu},{20:[1,77]},{7:72,27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq,46:78,47:71,48:$Vu},{34:[1,79]},{7:72,27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq,46:80,47:71,48:$Vu},{36:[1,81]},{7:72,27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq,46:82,47:71,48:$Vu},{24:[1,83]},{19:$Vj,26:[1,84],42:85,43:$Vk,44:55,45:$Vl},o($Vv,[2,37]),{19:$Vj,44:86},{19:$Vj,44:87},o($Vv,[2,40]),{28:[1,90],49:[1,88],50:[1,89],51:[1,91]},{8:[1,92]},{19:[1,93]},{19:[1,94]},{19:[1,95]},{19:[1,96]},{19:[1,97]},{19:$Vj,26:[1,98],42:85,43:$Vk,44:55,45:$Vl},{6:25,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,54:[1,99],55:$V8,56:$V9,57:$Va,58:$Vb},{7:72,27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq,46:100,47:71,48:$Vu},o($Vw,[2,22],{18:$Vx,37:$Vy,38:$Vz,39:$VA}),{24:$Vr,25:105,37:$Vs,40:$Vt},o($VB,[2,34]),{24:$Vr,25:106,37:$Vs,40:$Vt},{7:72,26:[1,107],27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq,47:108,48:$Vu},o($VC,[2,42]),o($VC,[2,43]),{7:109,27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq},o($Vw,[2,23]),o($Vw,[2,24]),{7:72,26:[1,110],27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq,47:108,48:$Vu},o($Vw,[2,25]),{7:72,26:[1,111],27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq,47:108,48:$Vu},o($Vw,[2,26]),{7:72,26:[1,112],27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq,47:108,48:$Vu},o($Vw,[2,27]),{7:72,26:[1,113],27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq,47:108,48:$Vu},{16:115,17:116,18:$VD,19:$VE,20:$VF,24:$Vr,25:114,37:$Vs,40:$Vt},{53:[1,120]},o($Vv,[2,36]),o($Vv,[2,38]),o($Vv,[2,39]),{19:[1,122],24:$Vr,25:121,28:[1,123],37:$Vs,40:$Vt},{19:[1,125],24:$Vr,25:124,28:[1,126],37:$Vs,40:$Vt},{28:[1,127]},{28:[1,128]},{19:$Vj,44:129},o($Vw,$Vd,{28:$Ve}),{28:$Vf},{28:$Vg},{28:$Vh},{28:$Vi},{53:[1,130]},{56:[1,131]},{7:72,26:[1,132],27:$Vm,29:$Vn,32:$Vo,33:$Vp,35:$Vq,47:108,48:$Vu},{24:$Vr,25:133,37:$Vs,40:$Vt},{24:$Vr,25:134,37:$Vs,40:$Vt},{24:$Vr,25:135,37:$Vs,40:$Vt},{24:$Vr,25:136,37:$Vs,40:$Vt},o($VB,[2,29]),{18:$Vx,26:[1,137],37:$Vy,38:$Vz,39:$VA},{53:[1,138]},o($VC,[2,41]),o($VC,[2,44]),{53:[1,139]},{53:[1,140]},{53:[1,141]},{53:[1,142]},{16:144,17:116,18:[1,145],19:$VE,20:$VF,26:[1,143],37:$Vy,38:$Vz,39:$VA},{17:147,18:$VD,19:$VE,20:$VF,26:[1,146]},o($VG,[2,14]),{19:$VH,20:$VI},o($VG,[2,17]),o($VG,[2,18]),{2:$V0,4:150,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},o($VJ,[2,45],{18:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VJ,[2,46]),{19:[1,152],24:$Vr,25:151,37:$Vs,40:$Vt},o($VJ,[2,47],{18:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VJ,[2,48]),{19:[1,154],24:$Vr,25:153,37:$Vs,40:$Vt},{19:[1,156],20:[1,159],24:$Vr,25:155,30:[1,157],31:[1,158],34:[1,160],37:$Vs,40:$Vt},{19:[1,162],20:[1,165],24:$Vr,25:161,30:[1,163],31:[1,164],34:[1,166],37:$Vs,40:$Vt},{8:[1,167]},{2:$V0,4:168,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},{24:[1,169]},{53:[1,170]},o($VK,[2,30],{38:$Vz,39:$VA}),o($VK,[2,31],{38:$Vz,39:$VA}),o($VB,[2,32]),o($VB,[2,33]),o($VB,[2,35]),{2:$V0,4:171,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},{2:$V0,4:172,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},{2:$V0,4:173,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},{2:$V0,4:174,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},{2:$V0,4:175,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},{8:[2,19]},{17:147,18:$VD,19:$VE,20:$VF,26:[1,176]},{19:$VH,20:$VI,24:$Vr,25:133,37:$Vs,40:$Vt},{8:[2,20]},o($VG,[2,13]),o($VG,[2,15]),o($VG,[2,16]),{6:25,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,54:[1,177],55:$V8,56:$V9,57:$Va,58:$Vb},o($VJ,[2,49],{18:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VJ,[2,50]),o($VJ,[2,51],{18:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VJ,[2,52]),o($VJ,[2,53],{18:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VJ,[2,54]),o($VJ,[2,55]),o($VJ,[2,56]),o($VJ,[2,57]),o($VJ,[2,58]),o($VJ,[2,59],{18:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VJ,[2,60]),o($VJ,[2,61]),o($VJ,[2,62]),o($VJ,[2,63]),o($VJ,[2,64]),{19:[1,178]},{6:25,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,54:[1,179],55:$V8,56:$V9,57:$Va,58:$Vb},{19:$Vj,41:180,42:52,43:$Vk,44:55,45:$Vl},{2:$V0,4:181,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},{6:25,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,54:[1,182],55:$V8,56:$V9,57:$Va,58:$Vb},{6:25,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,54:[1,183],55:$V8,56:$V9,57:$Va,58:$Vb},{6:25,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,54:[1,184],55:$V8,56:$V9,57:$Va,58:$Vb},{6:25,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,54:[1,185],55:$V8,56:$V9,57:$Va,58:$Vb},{6:25,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,54:[1,186],55:$V8,56:$V9,57:$Va,58:$Vb},{8:[2,21]},o($Vc,[2,65]),{18:[1,187],37:[1,188]},o($Vc,[2,68]),{19:$Vj,26:[1,189],42:85,43:$Vk,44:55,45:$Vl},{6:25,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,54:[1,190],55:$V8,56:$V9,57:$Va,58:$Vb},o($Vc,[2,71]),o($Vc,[2,74]),o($Vc,[2,72]),o($Vc,[2,73]),o($Vc,[2,75]),{18:[1,191]},{37:[1,192]},{8:[1,193]},o($Vc,[2,70]),{26:[1,194]},{26:[1,195]},o($Vc,[2,69]),{53:[1,196]},{53:[1,197]},{2:$V0,4:198,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},{2:$V0,4:199,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,55:$V8,56:$V9,57:$Va,58:$Vb},{6:25,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,54:[1,200],55:$V8,56:$V9,57:$Va,58:$Vb},{6:25,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:$V1,27:$V2,29:$V3,32:$V4,33:$V5,35:$V6,52:$V7,54:[1,201],55:$V8,56:$V9,57:$Va,58:$Vb},o($Vc,[2,66]),o($Vc,[2,67])],
defaultActions: {24:[2,1],143:[2,19],146:[2,20],176:[2,21]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Instruccion = require('./Instruccion.js');
	const Reportes = require('./reportes.js');
	const Declaracion = require('./Declaracion.js');
	const SymbolTable = require('./tabla_simbolos.js');
	const Type = require('./tipo.js');
	const Print = require('./Imprimir.js');
	const If = require('./If.js');
	const Iden=require('./Identacion.js')
	const Param= require('./Parametro.js')
	const Logi = require('./Logicos.js')
	const Conca = require('./Concatenar.js')
	const For = require('./For.js')
	const While= require('./While.js')
	const DoWhile= require('./DoWhile.js')
	const Void= require('./Void.js')
	const Func= require('./Funciones.js')
	var cont=0;
	var reportes = new Reportes();
	var tabla_simbolo = new SymbolTable(null);
	var identacion=new Iden(cont);
	
	
	tabla_simbolo.reportes = reportes;
	var trad="";
	

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'REVALUAR';
break;
case 1:return 21;
break;
case 2:return 56
break;
case 3:return 55;
break;
case 4:return 23;
break;
case 5:return 27;
break;
case 6:return 35;
break;
case 7:return 33;
break;
case 8:return 29;
break;
case 9:return 32;
break;
case 10:return 52;
break;
case 11:return 57;
break;
case 12:return 58
break;
case 13:return 'T_BREAK'
break;
case 14:return 'T_RETURN'
break;
case 15:return 'T_CONTINUE'
break;
case 16:return 22;
break;
case 17:return 48;
break;
case 18:return 8;
break;
case 19:return 24;
break;
case 20:return 26;
break;
case 21:return 'CORIZQ';
break;
case 22:return 'CORDER';
break;
case 23:return 53;
break;
case 24:return 54;					
break;
case 25:return 18;
break;
case 26:return 37;
break;
case 27:return 38;
break;
case 28:return 39;
break;
case 29:return 28;
break;
case 30:return 50;
break;
case 31:return 49;
break;
case 32:return 51;
break;
case 33:return 45;
break;
case 34:return 43;
break;
case 35:return 30
break;
case 36:return 31
break;
case 37:
break;
case 38:
break;
case 39: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 20; 
break;
case 40:return 40;
break;
case 41:return 36;
break;
case 42:return 19;
break;
case 43:return 34;
break;
case 44:return 5;
break;
case 45: console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:Evaluar\b)/i,/^(?:Console\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:Write\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/i,/^(?:('[^\']')|('''')|(#{ENTERO}))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}